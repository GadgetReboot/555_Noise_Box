/*******************************************************************************
       This is an example for using the MCP42100 digital potentiometers
       in a 555 oscillator frequency control situation.

       By controlling the pot over SPI with an MCP23s17 GPIO Expander
       and changing the oscillator frequency,
       tones or sound effects can be generated by the 555.

       Hardware project:  https://github.com/GadgetReboot/555_Noise_Box
       Arduino chip used: ATTiny804 (install board file  megaTinyCore 2.5.11)
       Tested on Arduino IDE 2.3.3
       
       Libraries used: Adafruit MCP23017 2.3.2
       MCP42100 Dual 100K Digital Pot control based on examples at https://wiki.dfrobot.com/Dual_Digital_Pot__100K__SKU__DFR0520

Arduino pin number map for MCP23017 physical GPIO pins
Refer to schematic to see where GPAx and GPBx pin names are wired in the circuit

mcp23017 pin #  pin name      Arduino sketch pin #
    21            GPA0             0
    22            GPA1             1
    23            GPA2             2
    24            GPA3             3
    25            GPA4             4
    26            GPA5             5
    27            GPA6             6
    28            GPA7             7
     1            GPB0             8
     2            GPB1             9
     3            GPB2             10
     4            GPB3             11
     5            GPB4             12
     6            GPB5             13
     7            GPB6             14
     8            GPB7             15

       Gadget Reboot

*******************************************************************************/

/*
Audio channel on/off control examples to turn on each channel and a corresponding LED on/off indicator
setAudioCh(MAIN555_1, ON, true);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(SUB555_A1, ON, true);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(SUB555_B1, ON, true);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(MAIN555_2, ON, true);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(SUB555_A2, ON, true);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(SUB555_B2, ON, true);  // parameters: audio ch, set on/off, led control true/false

Audio channel on/off control examples to turn off each channel and not control an LED indicator
setAudioCh(MAIN555_1, OFF, false);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(SUB555_A1, OFF, false);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(SUB555_B1, OFF, false);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(MAIN555_2, OFF, false);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(SUB555_A2, OFF, false);  // parameters: audio ch, set on/off, led control true/false
setAudioCh(SUB555_B2, OFF, false);  // parameters: audio ch, set on/off, led control true/false
*/

#include <SPI.h>
#include <Adafruit_MCP23X17.h>

// create mcp23017 object to interact with
Adafruit_MCP23X17 controllerIO;

// ATTiny804 GPIO assignment for SPI chip select outputs
const byte nCS1 = 0;  // chip select MCP23s17 GPIO Expander
const byte nCS2 = 1;  // chip select MCP42100 digital pots 555 #1
const byte nCS3 = 2;  // chip select MCP42100 digital pots 555 #2
const byte nCS4 = 3;  // chip select MCP42100 digital pot output volume

// mcp23s17 GPIO assignment
// 555 oscillator paths enabled/disabled
const byte osc1a = 8;   // GPB0  555 #1 Main Osc
const byte osc1b = 9;   // GPB1  555 #1 Sub Octave 1 Osc
const byte osc1c = 10;  // GPB2  555 #1 Sub Octave 2 Osc
const byte osc2a = 11;  // GPB3  555 #2 Main Osc
const byte osc2b = 12;  // GPB4  555 #2 Sub Octave 1 Osc
const byte osc2c = 13;  // GPB5  555 #2 Sub Octave 2 Osc

const byte led1 = 0;  // GPA0
const byte led2 = 1;  // GPA1
const byte led3 = 2;  // GPA2
const byte led4 = 3;  // GPA3
const byte led5 = 4;  // GPA4
const byte led6 = 5;  // GPA5

const byte spare1 = 14;  // GPB6
const byte spare2 = 15;  // GPB7
const byte spare3 = 6;   // GPA6
const byte spare4 = 7;   // GPA7

// mcp42100 digital pot control
const int maxPositions = 256;       // wiper can move from 0 to 255 = 256 positions
const byte pot0 = 0x11;             // pot0 addr
const byte pot1 = 0x12;             // pot1 addr
const byte potBoth = 0x13;          // pot0 and pot1 simultaneous addr
const byte pot0Shutdown = 0x21;     // pot0 shutdown
const byte pot1Shutdown = 0x22;     // pot1 shutdown
const byte potBothShutdown = 0x23;  // pot0 and pot1 simultaneous shutdown

enum audioCh { MAIN555_1,
               SUB555_A1,
               SUB555_B1,
               MAIN555_2,
               SUB555_A2,
               SUB555_B2 };  // assign audio channel names for 555 oscillators


#define ON 1  // boolean defines for function control
#define OFF 0


void setup() {

  // digital pot init
  digitalWrite(nCS2, HIGH);  // chip select defaults to de-selected
  digitalWrite(nCS3, HIGH);  // chip select defaults to de-selected
  digitalWrite(nCS4, HIGH);  // chip select defaults to de-selected
  pinMode(nCS2, OUTPUT);     // configure chip select as output
  pinMode(nCS3, OUTPUT);     // configure chip select as output
  pinMode(nCS4, OUTPUT);     // configure chip select as output
  SPI.begin();

  // init mcp23017 and configure GPIO
  controllerIO.begin_SPI(nCS1, &SPI);

  controllerIO.digitalWrite(osc1a, LOW);
  controllerIO.digitalWrite(osc1b, LOW);
  controllerIO.digitalWrite(osc1c, LOW);
  controllerIO.digitalWrite(osc2a, LOW);
  controllerIO.digitalWrite(osc2b, LOW);
  controllerIO.digitalWrite(osc2c, LOW);

  controllerIO.digitalWrite(led1, LOW);
  controllerIO.digitalWrite(led2, LOW);
  controllerIO.digitalWrite(led3, LOW);
  controllerIO.digitalWrite(led4, LOW);
  controllerIO.digitalWrite(led5, LOW);
  controllerIO.digitalWrite(led6, LOW);

  controllerIO.pinMode(osc1a, OUTPUT);
  controllerIO.pinMode(osc1b, OUTPUT);
  controllerIO.pinMode(osc1c, OUTPUT);

  controllerIO.pinMode(osc2a, OUTPUT);
  controllerIO.pinMode(osc2b, OUTPUT);
  controllerIO.pinMode(osc2c, OUTPUT);

  controllerIO.pinMode(led1, OUTPUT);
  controllerIO.pinMode(led2, OUTPUT);
  controllerIO.pinMode(led3, OUTPUT);
  controllerIO.pinMode(led4, OUTPUT);
  controllerIO.pinMode(led5, OUTPUT);
  controllerIO.pinMode(led6, OUTPUT);

  controllerIO.pinMode(spare1, INPUT_PULLUP);
  controllerIO.pinMode(spare2, INPUT_PULLUP);
  controllerIO.pinMode(spare3, INPUT_PULLUP);
  controllerIO.pinMode(spare4, INPUT_PULLUP);

  // set potentiometer wiper starting positions while audio paths are disabled
  setPotWiper(nCS2, potBoth, 128);  // move both pots in mcp42100 to center position on 555 #1
  setPotWiper(nCS3, pot0, 255);     // 555 #2 pot
  setPotWiper(nCS3, pot1, 200);     // 555 #2 pot
  setPotWiper(nCS4, potBoth, 128);  // move both pots in mcp42100 to center position on output volume op amp


  randomSeed(analogRead(0));  // init random number seed for random tone generation

  // test LEDs
  for (int i = 0; i <= 5; i++) {
    controllerIO.digitalWrite(i, HIGH);
    delay(50);
  }
  delay(300);
  for (int i = 5; i >= 0; i--) {
    controllerIO.digitalWrite(i, LOW);
    delay(50);
  }
}

void loop() {
  debugTones();
  /*  
  semiRandomOctaves();  // testing octave tone generators
  slidingTone();  // pitch sliding around
  laser_shot();
  tremolo();
  bleeps_bloops();  // play random fast tones
  drone();  // simple melody with droning background
*/
  delay(1000);
}

/*------------------------------ digital pot and audio path control functions -------------------------------*/

// move a digital pot to a specific wiper position from min to max (0-255)
void setPotWiper(byte nCS, byte addr, byte pos) {  // pot chip select, pot address within chip, position to move wiper 0-255
  pos = constrain(pos, 0, 255);                    // limit wiper setting to range of 0 to 255
  digitalWrite(nCS, LOW);                          // select chip
  SPI.transfer(addr);                              // configure target pot with wiper position
  SPI.transfer(pos);
  digitalWrite(nCS, HIGH);  // de-select chip
}

// turn a 555 audio channel on/off with optional corresponding LED indicator
void setAudioCh(audioCh channel, boolean setMode, boolean ctrlLED) {  // which 555 audio path, ON/OFF control, true/false control LED for channel activity

  switch (channel) {
    case MAIN555_1:
      if (setMode) {
        controllerIO.digitalWrite(osc1a, HIGH);              // turn on 555 #1 main osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led1, HIGH);  // turn on LED if requested
      } else {
        controllerIO.digitalWrite(osc1a, LOW);              // turn off 555 #1 main osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led1, LOW);  // turn off LED if requested
      }
      break;
    case SUB555_A1:
      if (setMode) {
        controllerIO.digitalWrite(osc1b, HIGH);              // turn on 555 #1 sub 1 osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led2, HIGH);  // turn on LED if requested
      } else {
        controllerIO.digitalWrite(osc1b, LOW);              // turn off 555 #1 sub 1 osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led2, LOW);  // turn off LED if requested
      }
      break;
    case SUB555_B1:
      if (setMode) {
        controllerIO.digitalWrite(osc1c, HIGH);              // turn on 555 #1 sub 2 osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led3, HIGH);  // turn on LED if requested
      } else {
        controllerIO.digitalWrite(osc1c, LOW);              // turn off 555 #1 sub 2 osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led3, LOW);  // turn off LED if requested
      }
      break;
    case MAIN555_2:
      if (setMode) {
        controllerIO.digitalWrite(osc2a, HIGH);              // turn on 555 #2 main osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led4, HIGH);  // turn on LED if requested
      } else {
        controllerIO.digitalWrite(osc2a, LOW);              // turn off 555 #2 main osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led4, LOW);  // turn off LED if requested
      }
      break;
    case SUB555_A2:
      if (setMode) {
        controllerIO.digitalWrite(osc2b, HIGH);              // turn on 555 #2 sub 1 osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led5, HIGH);  // turn on LED if requested
      } else {
        controllerIO.digitalWrite(osc2b, LOW);              // turn off 555 #2 sub 1 osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led5, LOW);  // turn off LED if requested
      }
      break;
    case SUB555_B2:
      if (setMode) {
        controllerIO.digitalWrite(osc2c, HIGH);              // turn on 555 #2 sub 2 osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led6, HIGH);  // turn on LED if requested
      } else {
        controllerIO.digitalWrite(osc2c, LOW);              // turn off 555 #2 sub 2 osc audio path
        if (ctrlLED) controllerIO.digitalWrite(led6, LOW);  // turn off LED if requested
      }
      break;
    default:

      break;
  }
}

// turn off all 555 osc channels and LEDs
void disableAllAudioCh() {
  setAudioCh(MAIN555_1, OFF, true);
  setAudioCh(SUB555_A1, OFF, true);
  setAudioCh(SUB555_B1, OFF, true);
  setAudioCh(MAIN555_2, OFF, true);
  setAudioCh(SUB555_A2, OFF, true);
  setAudioCh(SUB555_B2, OFF, true);
}

/*---------------------------------------- noise making functions -------------------------------*/

void debugTones() {
  disableAllAudioCh();
  setPotWiper(nCS2, pot1, 0);       // 555 #1 control voltage
  setPotWiper(nCS2, pot0, 0);       // 555 #1 main freq
  setAudioCh(MAIN555_1, ON, true);  // 555 #1 main osc on

  // one beep
  setPotWiper(nCS2, pot1, 100);  // 555 #1 control voltage
  setPotWiper(nCS2, pot0, 100);  // 555 #1 main freq
  delay(500);
  setAudioCh(MAIN555_1, OFF, true);  // 555 #1 main osc off
  delay(500);
  setAudioCh(MAIN555_1, ON, true);  // 555 #1 main osc on

  // sweep up 555 #1 main freq from min to max wiper with CV pot min wiper fixed
  for (int i = 0; i <= 255; i++) {
    setPotWiper(nCS2, pot0, i);
    delay(5);
  }
  delay(500);

  // two beeps
  setPotWiper(nCS2, pot1, 100);  // 555 #1 control voltage
  setPotWiper(nCS2, pot0, 100);  // 555 #1 main freq
  delay(500);
  setAudioCh(MAIN555_1, OFF, true);  // 555 #1 main osc off
  delay(500);
  setAudioCh(MAIN555_1, ON, true);  // 555 #1 main osc on
  delay(500);
  setAudioCh(MAIN555_1, OFF, true);  // 555 #1 main osc off
  delay(500);
  setAudioCh(MAIN555_1, ON, true);  // 555 #1 main osc on

  // sweep up 555 #1 main freq from min to max wiper with CV pot middle wiper fixed
  setPotWiper(nCS2, pot1, 127);  // 555 #1 control voltage
  for (int i = 0; i <= 255; i++) {
    setPotWiper(nCS2, pot0, i);
    delay(5);
  }

  // three beeps
  setPotWiper(nCS2, pot1, 100);  // 555 #1 control voltage
  setPotWiper(nCS2, pot0, 100);  // 555 #1 main freq
  delay(500);
  setAudioCh(MAIN555_1, OFF, true);  // 555 #1 main osc off
  delay(500);
  setAudioCh(MAIN555_1, ON, true);  // 555 #1 main osc on
  delay(500);
  setAudioCh(MAIN555_1, OFF, true);  // 555 #1 main osc off
  delay(500);
  setAudioCh(MAIN555_1, ON, true);  // 555 #1 main osc on
  delay(500);
  setAudioCh(MAIN555_1, OFF, true);  // 555 #1 main osc off
  delay(500);
  setAudioCh(MAIN555_1, ON, true);  // 555 #1 main osc on

  // sweep up 555 #1 main freq from min to max wiper with CV pot max wiper fixed
  setPotWiper(nCS2, pot1, 200);  // 555 #1 control voltage
  for (int i = 0; i <= 255; i++) {
    setPotWiper(nCS2, pot0, i);
    delay(5);
  }
  disableAllAudioCh();
}


void laser_shot() {
  disableAllAudioCh();
  setPotWiper(nCS2, pot1, 160);  // 555 #1 control voltage

  for (int i = 0; i < 4; i++) {
    setPotWiper(nCS2, pot0, 150);           // 555 #1 main freq
    setAudioCh(MAIN555_1, ON, true);        // 555 #1 main osc on
    setPotWiper(nCS2, pot0, 230);           // 555 #1 main freq
    for (int cnt = 240; cnt >= 100; cnt--)  // sweep tone at certain speed for certain time
    {
      setPotWiper(nCS2, pot0, cnt);
      delayMicroseconds(2300);
    }
    setAudioCh(MAIN555_1, OFF, true);  // 555 #1 main osc off
    delay(100);
  }
  disableAllAudioCh();
}

void tremolo() {

  disableAllAudioCh();
  setPotWiper(nCS2, pot0, 10);   // 555 #1 main freq
  setPotWiper(nCS2, pot1, 20);   // 555 #1 control voltage
  setPotWiper(nCS3, pot0, 100);  // 555 #2 main freq
  setPotWiper(nCS3, pot1, 60);   // 555 #2 control voltage

  setAudioCh(SUB555_A1, ON, true);  // 555 #1 sub 1 on
  setAudioCh(SUB555_B2, ON, true);  // 555 #2 sub 2 on

  // sweep tone at certain speed for certain time
  int delayTime = 5;
  for (int i = 0; i <= 200; i++) {
    setPotWiper(nCS2, pot0, i);  // 555 #1 main freq
    delay(delayTime);
  }

  for (int cnt = 129; cnt <= 200; cnt++)  // ramp volume from default 128 to 200 smoothly to avoid pops
  {
    setPotWiper(nCS4, pot0, cnt);
    delay(1);
  }

  for (int i = 0; i < 4; i++)  // volume changes
  {
    for (int cnt = 200; cnt >= 50; cnt--)  // volume down
    {
      setPotWiper(nCS4, pot0, cnt);
      delayMicroseconds(725);
    }
    for (int cnt = 50; cnt <= 200; cnt++)  // volume up
    {
      setPotWiper(nCS4, pot0, cnt);
      delayMicroseconds(725);
    }
  }

  for (int cnt = 200; cnt >= 128; cnt--)  // ramp volume from 200 to default 128 smoothly to avoid pops
  {
    setPotWiper(nCS4, pot0, cnt);
    delay(1);
  }
  delay(200);
  disableAllAudioCh();
  setPotWiper(nCS4, pot0, 128);  // volume pot
}

void slidingTone() {
  disableAllAudioCh();
  int delayTime = 2;
  setPotWiper(nCS2, pot1, 200);  // 555 #1 control voltage
  setAudioCh(MAIN555_1, ON, true);
  // sweep main freq of 555 #1 up
  for (int i = 0; i <= 255; i++) {
    setPotWiper(nCS2, pot0, i);  // 555 #1 main freq
    delay(delayTime);
  }
  // sweep main freq of 555 #1 down
  for (int i = 254; i >= 0; i--) {
    setPotWiper(nCS2, pot0, i);  // 555 #1 main freq
    delay(delayTime);
  }

  setPotWiper(nCS2, pot0, 128);  // 555 #1 main freq

  // sweep control voltage of 555 #1 up
  for (int i = 0; i <= 255; i++) {
    setPotWiper(nCS2, pot1, i);  // 555 #1 control voltage
    delay(delayTime);
  }
  // sweep main freq of 555 #1 down
  for (int i = 254; i >= 0; i--) {
    setPotWiper(nCS2, pot1, i);  // 555 #1 control voltage
    delay(delayTime);
  }
}

// test sub octave channels
void semiRandomOctaves() {
  int delayTime = 400;
  disableAllAudioCh();
  setPotWiper(nCS2, pot1, 200);  // 555 #1 control voltage
  setPotWiper(nCS3, pot1, 200);  // 555 #2 control voltage
  setPotWiper(nCS2, pot0, 200);  // 555 #1 main freq
  setAudioCh(MAIN555_1, ON, true);
  delay(delayTime);
  setAudioCh(SUB555_A1, ON, true);
  delay(delayTime);
  setAudioCh(SUB555_B1, ON, true);
  delay(delayTime);
  setPotWiper(nCS2, pot1, 215);  // 555 #1 control voltage
  delay(delayTime);
  disableAllAudioCh();

  setPotWiper(nCS3, pot0, 200);  // 555 #2 main freq
  setAudioCh(MAIN555_2, ON, true);
  delay(delayTime);
  setAudioCh(SUB555_A2, ON, true);
  delay(delayTime);
  setAudioCh(SUB555_B2, ON, true);
  delay(delayTime);
  setPotWiper(nCS3, pot0, 210);  // 555 #2 main freq
  delay(delayTime);
  disableAllAudioCh();
}

// random bleeps & bloops
// alternately generated between two 555's
void bleeps_bloops() {
  disableAllAudioCh();
  byte audioDelayOn = 60;
  byte audioDelayOff = 7;
  for (int cnt = 0; cnt <= 20; cnt++) {
    setAudioCh(SUB555_A2, ON, true);  // enable 555 #2 sub osc 1 with LED indicator
    delay(audioDelayOn);
    setAudioCh(SUB555_A2, OFF, true);  // disable 555 #2 sub osc 1
    delay(audioDelayOff);
    setPotWiper(nCS3, pot0, random(50, 255));  // select a new 555 #2 freq.
    setPotWiper(nCS3, pot1, random(0, 200));   // select a new 555 #2 control voltage
    setAudioCh(MAIN555_1, ON, true);           // enable 555 #1 main osc with LED indicator
    delay(audioDelayOn);
    setAudioCh(MAIN555_1, OFF, true);  // disable 555 #1 main osc with LED indicator
    delay(audioDelayOff);
    setPotWiper(nCS2, pot0, random(50, 255));  // select a new 555 #1 freq.
    setPotWiper(nCS2, pot1, random(0, 200));   // select a new 555 #1 control voltage
  }
}

// play a melody over a drone note
void drone() {
  disableAllAudioCh();

  // pre-set oscillators
  setPotWiper(nCS2, pot1, 20);  // 555 #1 control voltage
  setPotWiper(nCS2, pot0, 10);  // set 555 #1 freq.

  // adjust 555 #1 freq. by sliding pitch up as pot wiper moves
  setAudioCh(MAIN555_1, ON, true);    // turn on 555 #1 main osc
  for (int cnt = 0; cnt < 60; cnt++)  // sweep tone at certain speed for certain # pot increments
  {
    setPotWiper(nCS2, pot0, cnt * 4);
    delay(15);
  }
  setAudioCh(MAIN555_1, OFF, true);  // turn off 555 #1 main osc
  setPotWiper(nCS2, pot1, 40);       // 555 #1 control voltage
  setPotWiper(nCS2, pot0, 80);       // set 555 #1 freq.
  setAudioCh(SUB555_A1, ON, true);   // turn on 555 #1 sub octave 1 and leave on as a drone note

  // play melody on second osc
  byte rootTone = 60;
  setPotWiper(nCS3, pot0, rootTone - 20);  // adjust 555 #2 freq. for melody
  setPotWiper(nCS3, pot1, 30);             // 555 #2 control voltage
  setAudioCh(MAIN555_2, ON, true);         // turn on 555 #2 main osc
  delay(300);
  setPotWiper(nCS3, pot0, rootTone + 20);  // adjust 555 #2 freq. for melody
  delay(300);
  setPotWiper(nCS3, pot0, rootTone + 120);
  delay(300);
  setPotWiper(nCS3, pot0, rootTone + 60);
  delay(300);
  setPotWiper(nCS3, pot0, rootTone + 100);
  delay(600);

  setPotWiper(nCS3, pot0, rootTone + 60);
  delay(300);
  setPotWiper(nCS3, pot0, rootTone - 20);
  delay(300);
  setPotWiper(nCS3, pot0, rootTone - 40);
  delay(600);

  setPotWiper(nCS3, pot0, rootTone + 60);
  delay(1200);
  setAudioCh(MAIN555_2, OFF, true);  // turn off 555 #2 main osc
  setAudioCh(SUB555_A1, OFF, true);  // turn off 555 #1 sub octave 1

  delay(500);

  setAudioCh(SUB555_A1, ON, true);         // turn on 555 #1 sub octave 1
  setPotWiper(nCS3, pot0, rootTone - 20);  // adjust 555 #2 freq. for melody
  setPotWiper(nCS3, pot1, 30);             // 555 #2 control voltage
  setAudioCh(SUB555_A2, ON, true);         // turn on 555 #2 sub octave 1
  delay(300);
  setPotWiper(nCS3, pot0, rootTone + 20);  // adjust 555 #2 freq. for melody
  delay(300);
  setPotWiper(nCS3, pot0, rootTone + 120);
  delay(300);
  setPotWiper(nCS3, pot0, rootTone + 60);
  delay(300);
  setPotWiper(nCS3, pot0, rootTone + 100);
  delay(600);

  setPotWiper(nCS3, pot0, rootTone + 60);
  delay(300);
  setPotWiper(nCS3, pot0, rootTone - 20);
  delay(300);
  setPotWiper(nCS3, pot0, rootTone - 40);
  delay(600);

  setPotWiper(nCS3, pot0, rootTone + 60);
  delay(1200);

  disableAllAudioCh();
}
